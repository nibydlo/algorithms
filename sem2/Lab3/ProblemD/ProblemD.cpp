#include <iostream>
#include <fstream>
#include <vector>
#include <set>
#include <queue>
#include <functional>

using namespace std;
vector< vector <pair< int, int> > > edgeList;
vector<int> d;
set< pair<int, int> > q;

//-----------------------------------------------
//------------------------------------------------
//---------\-.?_.?,/"/-----------------------------
//----------"/.**...l-'-------------------------------
//-----------\...../..\--------------------------------
//------------|.../-\..\-------------------------------
//-----------(_/---\...\------------------------------
//------------------\...\-----------------------------
//-------------------\...\----------------------------
//--------------------\...\----------------------------
//---------------------\...\-----------------------------
//----------------------\...\-------------------------------
//-----------------------\...\--------------------------------
//------------------------\....\-------------------------------
//-------------------------|.....\------------------------------
//-----------------------,-'.....o.\----------------------------
//----------------------/..^^^.....o.'-,-------------------------
//---------------------(..^^^^.........o.'-,-----------------------
//----------------------\..^^^^...........O.\------------------------
//-----------------------\...^^^^^.......O..|-,------------------------
//------------------------\..|...../'-._,-'../---\------------------------
//-------------------------|..\...|-----\...|---#-------------------------
//--------------------------\.|../------|../------------------------------
//---------------------------\|.|-------\.|------------------------------
//----------------------------|/--------|/-----------------------------
//-------------------------------------------------------------------
//-----------------------------------------------------------------


int main() {

    ifstream fin("pathbgep.in");
    ofstream fout("pathbgep.out");

    int n, m, start, finish, weight;
    fin >> n >> m;

    edgeList.resize(n);
    for (int i = 0; i < m; i++) {
        fin >> start >> finish >> weight;
        edgeList[start - 1].push_back(make_pair(finish - 1, weight));
        edgeList[finish - 1].push_back(make_pair(start - 1, weight));
    }

    d.assign(n, INT_MAX);
    d[0] = 0;
    /*q.insert(make_pair(d[0], 0));
    while(!q.empty()) {
        int curNode = q.begin() -> second;
        q.erase(q.begin());

        for(int i = 0; i < edgeList[curNode].size(); i++) {
            int nextNode = edgeList[curNode][i].first;
            int curWeight = edgeList[curNode][i].second;
            if(d[curNode] + curWeight < d[nextNode]) {
                q.erase(make_pair(d[nextNode], nextNode));
                d[nextNode] = d[curNode] + curWeight;
                q.insert(make_pair(d[nextNode], nextNode));
            }
        }
    }*/

    /*priority_queue < pair < int, int > > q;
    q.push(make_pair(0, 0));
    while(!q.empty()) {
        int curNode = q.top().second;
        int curW = -q.top().first;
        q.pop();
        if(curW > d[curNode]) {
            continue;
        }

        for (int i = 0; i < edgeList[curNode].size(); i++) {
            int nextNode = edgeList[curNode][i].first;
            int curWeight = edgeList[curNode][i].second;
            if (d[curNode] + curWeight < d[nextNode]) {
                d[nextNode] = d[curNode] + curWeight;
                q.push(make_pair(-d[nextNode], nextNode));
            }
        }
    }*/

    priority_queue < pair<int,int> > q;
	q.push (make_pair (0, 0));
	while (!q.empty()) {
		int curNode = q.top().second,  curW = -q.top().first;
		q.pop();
		if (curW > d[curNode])  continue;

		for (int i = 0; i < edgeList[curNode].size(); i++) {
			int nextNode = edgeList[curNode][i].first;
			int	curWeight = edgeList[curNode][i].second;
			if (d[curNode] + curWeight < d[nextNode]) {
				d[nextNode] = d[curNode] + curWeight;

				q.push (make_pair (-d[nextNode], nextNode));
			}
		}
	}

    for(int i = 0; i < n; i++) {
        fout << d[i] << " ";
    }

    fin.close();
    fout.close();

    return 0;
}

//-----------------------------------------------
//------------------------------------------------
//---------\-.?_.?,/"/-----------------------------
//----------"/.**...l-'-------------------------------
//-----------\...../..\--------------------------------
//------------|.../-\..\-------------------------------
//-----------(_/---\...\------------------------------
//------------------\...\-----------------------------
//-------------------\...\----------------------------
//--------------------\...\----------------------------
//---------------------\...\-----------------------------
//----------------------\...\-------------------------------
//-----------------------\...\--------------------------------
//------------------------\....\-------------------------------
//-------------------------|.....\------------------------------
//-----------------------,-'.....o.\----------------------------
//----------------------/..^^^.....o.'-,-------------------------
//---------------------(..^^^^.........o.'-,-----------------------
//----------------------\..^^^^...........O.\------------------------
//-----------------------\...^^^^^.......O..|-,------------------------
//------------------------\..|...../'-._,-'../---\------------------------
//-------------------------|..\...|-----\...|---#-------------------------
//--------------------------\.|../------|../------------------------------
//---------------------------\|.|-------\.|------------------------------
//----------------------------|/--------|/-----------------------------
//-------------------------------------------------------------------
//-----------------------------------------------------------------

