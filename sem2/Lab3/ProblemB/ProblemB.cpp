#include <iostream>
#include <fstream>
#include <vector>
#include <set>
#include <queue>
#include <functional>

using namespace std;
vector< vector <pair< int, int> > > edgeList, edgeListT;
vector<long long> d;
set< pair<int, int> > q;
vector< bool > isAttainable;

//-----------------------------------------------
//------------------------------------------------
//---------\-.?_.?,/"/-----------------------------
//----------"/.**...l-'-------------------------------
//-----------\...../..\--------------------------------
//------------|.../-\..\-------------------------------
//-----------(_/---\...\------------------------------
//------------------\...\-----------------------------
//-------------------\...\----------------------------
//--------------------\...\----------------------------
//---------------------\...\-----------------------------
//----------------------\...\-------------------------------
//-----------------------\...\--------------------------------
//------------------------\....\-------------------------------
//-------------------------|.....\------------------------------
//-----------------------,-'.....o.\----------------------------
//----------------------/..^^^.....o.'-,-------------------------
//---------------------(..^^^^.........o.'-,-----------------------
//----------------------\..^^^^...........O.\------------------------
//-----------------------\...^^^^^.......O..|-,------------------------
//------------------------\..|...../'-._,-'../---\------------------------
//-------------------------|..\...|-----\...|---#-------------------------
//--------------------------\.|../------|../------------------------------
//---------------------------\|.|-------\.|------------------------------
//----------------------------|/--------|/-----------------------------
//-------------------------------------------------------------------
//-----------------------------------------------------------------


void dfs(int curNode) {
    isAttainable[curNode] = true;
    //cout << "isAttainable[" << curNode << "] = " << isAttainable[curNode] << endl;
    /*for (int i = 0; i < n; i++) {
        cout << isAttainable[i] << " ";
    }
    cout << endl;*/
    for (int i = 0; i < edgeList[curNode].size(); i++) {
        int nextNode = edgeList[curNode][i].first;
        if (isAttainable[nextNode] == false) {
            dfs(nextNode);
        }
    }
}

int main() {

    ifstream fin("pathmgep.in");
    ofstream fout("pathmgep.out");

    int n, s, f, start, finish, weight, temp;
    fin >> n >> s >> f;

    edgeList.resize(n);
    //edgeListT.resize(n);
    /*int** matrix = new int*[n];
    for (int i = 0; i < n; i++) {
        matrix[i] = new int[n];
    }*/
    for (int i = 0; i < n; i++) {
        for (int j = 0 ; j < n; j++) {
            fin >> temp;
            if(temp != -1) {
                edgeList[i].push_back(make_pair(j, temp));
                //edgeListT[j].push_back(make_pair(i, temp));
            }
        }
    }

    isAttainable.assign(n, false);
    dfs(s - 1);
    if (!isAttainable[f - 1]) {
        fout << -1;
        return 0;
    }

    d.assign(n, LLONG_MAX);
    d[s - 1] = 0;

    //-----------------------------------------------
//------------------------------------------------
//---------\-.?_.?,/"/-----------------------------
//----------"/.**...l-'-------------------------------
//-----------\...../..\--------------------------------
//------------|.../-\..\-------------------------------
//-----------(_/---\...\------------------------------
//------------------\...\-----------------------------
//-------------------\...\----------------------------
//--------------------\...\----------------------------
//---------------------\...\-----------------------------
//----------------------\...\-------------------------------
//-----------------------\...\--------------------------------
//------------------------\....\-------------------------------
//-------------------------|.....\------------------------------
//-----------------------,-'.....o.\----------------------------
//----------------------/..^^^.....o.'-,-------------------------
//---------------------(..^^^^.........o.'-,-----------------------
//----------------------\..^^^^...........O.\------------------------
//-----------------------\...^^^^^.......O..|-,------------------------
//------------------------\..|...../'-._,-'../---\------------------------
//-------------------------|..\...|-----\...|---#-------------------------
//--------------------------\.|../------|../------------------------------
//---------------------------\|.|-------\.|------------------------------
//----------------------------|/--------|/-----------------------------
//-------------------------------------------------------------------
//

    priority_queue < pair<int,int> > q;
	q.push (make_pair (0, s - 1));
	while (!q.empty()) {
		int curNode = q.top().second,  curW = -q.top().first;
		q.pop();
		if (curW > d[curNode])  continue;

		for (int i = 0; i < edgeList[curNode].size(); i++) {
			int nextNode = edgeList[curNode][i].first;
			int	curWeight = edgeList[curNode][i].second;
			if (d[curNode] + curWeight < d[nextNode]) {
				d[nextNode] = d[curNode] + curWeight;

				q.push (make_pair (-d[nextNode], nextNode));
			}
		}
	}

    /*if (d[f - 1] >= INT_MAX) {
        fout << -1;
        return 0;
    }*/
    fout << d[f - 1];

    fin.close();
    fout.close();

    return 0;
}

//-----------------------------------------------
//------------------------------------------------
//---------\-.?_.?,/"/-----------------------------
//----------"/.**...l-'-------------------------------
//-----------\...../..\--------------------------------
//------------|.../-\..\-------------------------------
//-----------(_/---\...\------------------------------
//------------------\...\-----------------------------
//-------------------\...\----------------------------
//--------------------\...\----------------------------
//---------------------\...\-----------------------------
//----------------------\...\-------------------------------
//-----------------------\...\--------------------------------
//------------------------\....\-------------------------------
//-------------------------|.....\------------------------------
//-----------------------,-'.....o.\----------------------------
//----------------------/..^^^.....o.'-,-------------------------
//---------------------(..^^^^.........o.'-,-----------------------
//----------------------\..^^^^...........O.\------------------------
//-----------------------\...^^^^^.......O..|-,------------------------
//------------------------\..|...../'-._,-'../---\------------------------
//-------------------------|..\...|-----\...|---#-------------------------
//--------------------------\.|../------|../------------------------------
//---------------------------\|.|-------\.|------------------------------
//----------------------------|/--------|/-----------------------------
//-------------------------------------------------------------------
//-----------------------------------------------------------------


